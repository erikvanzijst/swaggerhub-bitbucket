
{"info": {"termsOfService": "https://www.atlassian.com/end-user-agreement", "version": "2.0", "contact": {"url": "https://bitbucket.org/support", "name": "Bitbucket Support", "email": "support@bitbucket.org"}, "description": "Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.", "title": "Bitbucket API"}, "paths": {"/repositories/{username}/{repo_slug}/refs/branches/{name}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "name", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["refs"]}}, "/teams/{username}/following": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["account"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of user objects.", "schema": {"$ref": "#/definitions/paginated_users"}}, "404": {"description": "If no team exists for the specified name, or if the specified account is a personal account, not a team account.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The team's username", "name": "username", "in": "path"}], "tags": ["teams"]}}, "/repositories/{username}/{repo_slug}/commit/{sha}/comments/{comment_id}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "sha", "in": "path"}, {"required": true, "type": "string", "name": "comment_id", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}}, "/repositories/{username}/{repo_slug}/hooks": {"post": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The URL of new newly created webhook."}}, "description": "If the webhook was registered successfully.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "403": {"description": "If the authenticated user does not have permission to install webhooks on the specified repository.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["repositories", "webhooks"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The paginated list of installed webhooks.", "schema": {"$ref": "#/definitions/paginated_webhook_subscriptions"}}, "403": {"description": "If the authenticated user does not have permission to access the webhooks.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["repositories", "webhooks"]}}, "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments/{path}": {"delete": {"security": [{"oauth2": ["issue:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "If the issue tracker is private and the request was not authenticated."}, "404": {"description": "If the specified repository, issue, or attachment does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "Indicates that the deletion was successful"}}, "parameters": [], "tags": ["issue_tracker"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "issue_id", "in": "path"}, {"required": true, "type": "string", "name": "path", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "If the issue tracker is private and the request was not authenticated."}, "404": {"description": "If the specified repository or issue does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}, "302": {"headers": {"Location": {"type": "string"}}, "description": "A redirect to the file's contents"}}, "parameters": [], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}/versions/{version_id}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "version_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The specified version object.", "schema": {"$ref": "#/definitions/version"}}, "404": {"description": "If the specified repository or version does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The version's id", "name": "version_id", "in": "path"}], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}/issues/{issue_id}/vote": {"put": {"security": [{"oauth2": ["issue", "account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "When the issue does not exist, the repo does not exist, or when the repos does not have an issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "Indicating the authenticated user has cast their vote successfully.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}, "delete": {"security": [{"oauth2": ["issue:write", "account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "issue_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue", "account"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the authenticated user has not voted for this issue, or when the repo does not exist, or does not have an issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "If the authenticated user has not voted for this issue.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}/milestones": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The milestones that have been defined in the issue tracker.", "schema": {"$ref": "#/definitions/paginated_milestones"}}, "404": {"description": "If the specified repository does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}/components": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The components that have been defined in the issue tracker.", "schema": {"$ref": "#/definitions/paginated_components"}}, "404": {"description": "If the specified repository does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}}, "/account/{username}/addons/{encoded_context_id}/refresh": {"put": {"security": [{"oauth2": ["account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_context_id", "in": "path"}]}, "/addon/linkers/{linker_key}/values": {"put": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "post": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "delete": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "parameters": [{"required": true, "type": "string", "name": "linker_key", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}}, "/repositories/{username}/{repo_slug}/refs/branches": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["refs"]}}, "/hook_events/{subject_type}": {"parameters": [{"required": true, "type": "string", "name": "subject_type", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of webhook types available to subscribe on.", "schema": {"$ref": "#/definitions/paginated_hook_events"}}, "404": {"description": "If an invalid `{subject_type}` value was specified.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"enum": ["user", "repository", "team"], "name": "subject_type", "required": true, "in": "path", "type": "string", "description": "A resource or subject type."}], "tags": ["webhooks"]}}, "/users/{username}/followers": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of user objects.", "schema": {"$ref": "#/definitions/paginated_users"}}, "404": {"description": "If no account exists for the specified name, or if the specified account is a team account, not a personal account.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The account's username", "name": "username", "in": "path"}], "tags": ["users"]}}, "/repositories/{username}/{repo_slug}/default-reviewers": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The paginated list of default reviewers"}}, "parameters": [], "tags": ["pullrequests"]}}, "/repositories/{username}/{repo_slug}/downloads/{filename}": {"delete": {"security": [{"oauth2": ["repository:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["downloads"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "filename", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["downloads"]}}, "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build/{key}": {"put": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": []}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "node", "in": "path"}, {"required": true, "type": "string", "name": "key", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": []}}, "/repositories/{username}/{repo_slug}/watchers": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["repositories"]}}, "/snippets/{username}/{encoded_id}/commits": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The paginated list of snippet commits.", "schema": {"$ref": "#/definitions/paginated_snippet_commit"}}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["snippets"]}}, "/users/{username}/repositories": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["users", "teams"]}}, "/repositories/{username}/{repo_slug}/pullrequests/activity": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/snippets/{username}/{encoded_id}/comments/{comment_id}": {"put": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The updated comment object."}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the comment or snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["snippets"]}, "delete": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"204": {"description": "Indicates the comment was deleted successfully."}, "403": {"description": "If the authenticated user is not the author of the comment.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the comment or the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["snippets"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "name": "comment_id", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The specified comment.", "schema": {"$ref": "#/definitions/snippet_comment"}}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the comment or snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["snippets"]}}, "/repositories/{username}/{repo_slug}/diff/{spec}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "spec", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}}, "/repositories/{username}/{repo_slug}/branch-restrictions": {"post": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["branch_restrictions"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["branch_restrictions"]}}, "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "issue_id", "in": "path"}, {"required": true, "type": "string", "name": "comment_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}/hooks/{uid}": {"put": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The webhook subscription object.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "403": {"description": "If the authenticated user does not have permission to update the webhook.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the webhook or repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id", "name": "uid", "in": "path"}], "tags": ["repositories", "webhooks"]}, "delete": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"204": {"description": "When the webhook was deleted successfully"}, "403": {"description": "If the authenticated user does not have permission to delete the webhook.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the webhook or repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id", "name": "uid", "in": "path"}], "tags": ["repositories", "webhooks"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "uid", "in": "path"}], "get": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The webhook subscription object.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "404": {"description": "If the webhook or repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id.", "name": "uid", "in": "path"}], "tags": ["repositories", "webhooks"]}}, "/users/{username}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The user object", "schema": {"$ref": "#/definitions/user"}}, "404": {"description": "If no user exists for the specified name or UUID, or if the specified account is a team account, not a personal account.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The account's username or UUID.", "name": "username", "in": "path"}], "tags": ["users"]}}, "/snippets/{username}/{encoded_id}": {"put": {"responses": {"200": {"description": "The updated snippet object.", "schema": {"$ref": "#/definitions/snippet"}}, "401": {"description": "If the snippet is private and the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "403": {"description": "If authenticated user does not have permission to update the private snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet's id.", "name": "encoded_id", "in": "path"}], "tags": ["snippets"], "produces": ["application/json", "multipart/related", "multipart/form-data"], "security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "consumes": ["application/json", "multipart/related", "multipart/form-data"], "description": ""}, "delete": {"security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "If the snippet is private and the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "403": {"description": "If authenticated user does not have permission to delete the private snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "If the snippet was deleted successfully."}}, "parameters": [{"required": true, "type": "string", "description": "The snippet's id.", "name": "encoded_id", "in": "path"}], "tags": ["snippets"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}], "get": {"responses": {"200": {"description": "The snippet object.", "schema": {"$ref": "#/definitions/snippet"}}, "401": {"description": "If the snippet is private and the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "403": {"description": "If authenticated user does not have access to the private snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet's id.", "name": "encoded_id", "in": "path"}], "produces": ["application/json", "multipart/related", "multipart/form-data"], "tags": ["snippets"], "security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": ""}}, "/addon/linkers": {"parameters": [], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/activity": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/users/{username}/hooks": {"post": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The URL of new newly created webhook."}}, "description": "The newly installed webhook.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "403": {"description": "If the authenticated user is accessing an account other than their own.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the specified account does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["users", "webhooks"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The paginated list of installed webhooks.", "schema": {"$ref": "#/definitions/paginated_webhook_subscriptions"}}, "403": {"description": "If the authenticated user is accessing an account other than their own.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the specified account does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["users", "webhooks"]}}, "/repositories/{username}/{repo_slug}/components/{component_id}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "component_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The specified component object.", "schema": {"$ref": "#/definitions/component"}}, "404": {"description": "If the specified repository or component does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The component's id", "name": "component_id", "in": "path"}], "tags": ["issue_tracker"]}}, "/addon": {"put": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "parameters": [], "delete": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}}, "/users/{username}/following": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["account"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of user objects.", "schema": {"$ref": "#/definitions/paginated_users"}}, "404": {"description": "If no user exists for the specified name, or if the specified account is a team account, not a personal account.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The user's username", "name": "username", "in": "path"}], "tags": ["users"]}}, "/repositories/{username}/{repo_slug}/issues/{issue_id}": {"delete": {"security": [{"oauth2": ["issue:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The issue object.", "schema": {"$ref": "#/definitions/issue"}}, "403": {"description": "When the authenticated user lacks isn't authorized to delete the issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the specified repository or issue does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "issue_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The issue object.", "schema": {"$ref": "#/definitions/issue"}}, "403": {"description": "When the authenticated user lacks isn't authorized to access the issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the specified repository or issue does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}}, "/teams/{username}/repositories": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["users", "teams"]}}, "/repositories/{username}/{repo_slug}/downloads": {"post": {"security": [{"oauth2": ["repository:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["downloads"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["downloads"]}}, "/repositories/{username}/{repo_slug}/refs": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["refs"]}}, "/hook_events": {"parameters": [], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A mapping of resource/subject types pointing to their individual event types.", "schema": {"$ref": "#/definitions/subject_types"}}}, "parameters": [], "tags": ["webhooks"]}}, "/teams/{username}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The team object", "schema": {"$ref": "#/definitions/team"}}, "404": {"description": "If no team exists for the specified name or UUID, or if the specified account is a personal account, not a team account.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The team's username or UUID.", "name": "username", "in": "path"}], "tags": ["teams"]}}, "/user/emails/{email}": {"parameters": [{"required": true, "type": "string", "name": "email", "in": "path"}], "get": {"security": [{"oauth2": ["email"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["users"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve": {"post": {"security": [{"oauth2": ["pullrequest:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}], "delete": {"security": [{"oauth2": ["pullrequest:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/repositories/{username}/{repo_slug}/patch/{spec}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "spec", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}}, "/repositories/{username}/{repo_slug}/forks": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "All forks.", "schema": {"$ref": "#/definitions/paginated_repositories"}}}, "parameters": [], "tags": ["repositories"]}}, "/repositories/{username}/{repo_slug}/issues": {"post": {"security": [{"oauth2": ["issue:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The (absolute) URL of the newly created issue."}}, "description": "The newly created issue.", "schema": {"$ref": "#/definitions/issue"}}, "403": {"description": "When the authenticated user lacks the privilege to create issues in the issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the specified repository or version does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}, "401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"schema": {"$ref": "#/definitions/issue"}, "required": true, "description": "The new issue. Note that the only required element is `title`. All other elements can be omitted from the body.", "name": "_body", "in": "body"}], "tags": ["issue_tracker"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of the issues matching any filter criteria that were provided.", "schema": {"$ref": "#/definitions/paginated_issues"}}, "404": {"description": "If the specified repository or version does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build": {"post": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": []}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "node", "in": "path"}]}, "/repositories/{username}/{repo_slug}/versions": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The versions that have been defined in the issue tracker.", "schema": {"$ref": "#/definitions/paginated_versions"}}, "404": {"description": "If the specified repository does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}}, "/teams/{username}/hooks/{uid}": {"put": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The webhook subscription object.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "403": {"description": "If the authenticated user does not have permission to update the webhook.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the webhook or team does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id", "name": "uid", "in": "path"}], "tags": ["teams", "webhooks"]}, "delete": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"204": {"description": "When the webhook was deleted successfully"}, "403": {"description": "If the authenticated user does not have permission to delete the webhook.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the webhook or team does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id", "name": "uid", "in": "path"}], "tags": ["teams", "webhooks"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "uid", "in": "path"}], "get": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The webhook subscription object.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "404": {"description": "If the webhook or team does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id.", "name": "uid", "in": "path"}], "tags": ["teams", "webhooks"]}}, "/repositories/{username}/{repo_slug}/refs/tags/{name}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "name", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["refs"]}}, "/snippets/{username}/{encoded_id}/watch": {"put": {"security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "If the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "Indicates the authenticated user is now watching the snippet.", "schema": {"$ref": "#/definitions/paginated_users"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet id.", "name": "encoded_id", "in": "path"}], "tags": ["snippets"]}, "delete": {"security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "If the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "Indicates the user stopped watching the snippet successfully.", "schema": {"$ref": "#/definitions/paginated_users"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet id.", "name": "encoded_id", "in": "path"}], "tags": ["snippets"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"204": {"description": "If the authenticated user is watching the snippet.", "schema": {"$ref": "#/definitions/paginated_users"}}, "404": {"description": "If the snippet does not exist, or if the authenticated user is not watching the snippet.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet id.", "name": "encoded_id", "in": "path"}], "tags": ["snippets"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diff": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/snippets": {"post": {"security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The URL of the newly created snippet."}}, "description": "The newly created snippet object.", "schema": {"$ref": "#/definitions/snippet"}}, "401": {"description": "If the request was not authenticated", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"schema": {"$ref": "#/definitions/snippet"}, "required": true, "description": "The new snippet object.", "name": "_body", "in": "body"}], "tags": ["snippets"]}, "parameters": [], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of snippets.", "schema": {"$ref": "#/definitions/paginated_snippets"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"enum": ["owner", "contributor", "member"], "name": "role", "required": false, "in": "query", "type": "string", "description": "Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`)."}], "tags": ["snippets"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}": {"put": {"security": [{"oauth2": ["pullrequest:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The pull request object", "schema": {"$ref": "#/definitions/pullrequest"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/account/{username}/addons/{encoded_context_id}": {"put": {"security": [{"oauth2": ["account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "delete": {"security": [{"oauth2": ["account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_context_id", "in": "path"}], "get": {"security": [{"oauth2": ["account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/decline": {"post": {"security": [{"oauth2": ["pullrequest:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}]}, "/user/emails": {"parameters": [], "get": {"security": [{"oauth2": ["email"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["users"]}}, "/repositories/{username}/{repo_slug}/pullrequests": {"post": {"security": [{"oauth2": ["pullrequest:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The URL of new newly created pull request."}}, "description": "The newly created pull request.", "schema": {"$ref": "#/definitions/pullrequest"}}}, "parameters": [{"schema": {"$ref": "#/definitions/pullrequest"}, "required": false, "description": "The new pull request.\n\nThe request URL you POST to becomes the destination repository URL. For this reason, you must specify an explicit source repository in the request object if you want to pull from a different repository (fork).\n\nSince not all elements are required or even mutable, you only need to include the elements you want to initialize, such as the source branch and the title.", "name": "_body", "in": "body"}], "tags": ["pullrequests"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"enum": ["MERGED", "SUPERSEDED", "OPEN", "DECLINED"], "type": "string", "description": "Only return pull requests that in this state. This parameter can be repeated.", "name": "state", "in": "query"}], "tags": ["pullrequests"]}}, "/repositories/{username}/{repo_slug}/commits": {"post": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}}, "/repositories/{username}/{repo_slug}/commit/{sha}/comments": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "sha", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}}, "/repositories/{username}/{repo_slug}/commit/{revision}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "revision", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The commit object", "schema": {"$ref": "#/definitions/commit"}}, "404": {"description": "If the specified commit or repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The commit's SHA1.", "name": "revision", "in": "path"}], "tags": ["commits"]}}, "/snippets/{username}": {"post": {"security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The URL of the newly created snippet."}}, "description": "The newly created snippet object.", "schema": {"$ref": "#/definitions/snippet"}}, "403": {"description": "If the authenticated user does not have permission to create snippets under the specified account.", "schema": {"$ref": "#/definitions/error"}}, "401": {"description": "If the request was not authenticated", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"schema": {"$ref": "#/definitions/snippet"}, "required": true, "description": "The new snippet object.", "name": "_body", "in": "body"}], "tags": ["snippets"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of snippets.", "schema": {"$ref": "#/definitions/paginated_snippets"}}, "404": {"description": "If the user does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"enum": ["owner", "contributor", "member"], "name": "role", "required": false, "in": "query", "type": "string", "description": "Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`)."}, {"required": true, "type": "string", "description": "Limits the result to snippets owned by this user.", "name": "username", "in": "path"}], "tags": ["snippets"]}}, "/repositories/{username}/{repo_slug}/issues/{issue_id}/watch": {"put": {"security": [{"oauth2": ["issue", "account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the authenticated user is not watching this issue, or when the repo does not exist, or does not have an issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "Indicates that the authenticated user successfully started watching this issue.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}, "delete": {"security": [{"oauth2": ["issue:write", "account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the issue or the repo does not exist, or the repository does not have an issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "Indicates that the authenticated user successfully stopped watching this issue.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "issue_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue", "account"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the authenticated user is not watching this issue, or when the repo does not exist, or does not have an issue tracker.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "If the authenticated user is watching this issue.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}/milestones/{milestone_id}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "milestone_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The specified milestone object.", "schema": {"$ref": "#/definitions/milestone"}}, "404": {"description": "If the specified repository or milestone does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The milestone's id", "name": "milestone_id", "in": "path"}], "tags": ["issue_tracker"]}}, "/snippets/{username}/{encoded_id}/commits/{revision}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "name": "revision", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The specified snippet commit.", "schema": {"$ref": "#/definitions/snippet_commit"}}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the commit or the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["snippets"]}}, "/teams": {"parameters": [], "get": {"security": [{"oauth2": ["team"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of teams.", "schema": {"$ref": "#/definitions/paginated_teams"}}, "401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"enum": ["admin", "contributor", "member"], "name": "role", "required": false, "in": "query", "type": "string", "description": "\nFilters the teams based on the authenticated user's role on each team.\n\n* **member**: returns a list of all the teams which the caller is a member of\n  at least one team group or repository owned by the team\n* **contributor**: returns a list of teams which the caller has write access\n  to at least one repository owned by the team\n* **admin**: returns a list teams which the caller has team administrator access\n"}], "tags": ["teams"]}}, "/user": {"parameters": [], "get": {"security": [{"oauth2": ["account"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The current user.", "schema": {"$ref": "#/definitions/user"}}, "401": {"description": "When the request wasn't authenticated.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["users"]}}, "/repositories/{username}/{repo_slug}/commits/{revision}": {"post": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "revision", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["commits"]}}, "/snippets/{username}/{encoded_id}/comments": {"post": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The URL of the new comment"}}, "description": "The newly created comment.", "schema": {"$ref": "#/definitions/snippet"}}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"schema": {"$ref": "#/definitions/snippet"}, "required": true, "description": "The contents of the new comment.", "name": "_body", "in": "body"}], "tags": ["snippets"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of snippet comments, ordered by creation date.", "schema": {"$ref": "#/definitions/paginated_snippet_comments"}}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["snippets"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}, {"required": true, "type": "string", "name": "comment_id", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/repositories/{username}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The repositories owned by the specified account.", "schema": {"$ref": "#/definitions/paginated_repositories"}}, "404": {"description": "If the specified account does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"enum": ["admin", "contributor", "member", "owner"], "name": "role", "required": false, "in": "query", "type": "string", "description": "\nFilters the result based on the authenticated user's role on each repository.\n\n* **member**: returns repositories to which the user has explicit read access\n* **contributor**: returns repositories to which the user has explicit write access\n* **admin**: returns repositories to which the user has explicit administrator access\n* **owner**: returns all repositories owned by the current user\n"}], "tags": ["repositories"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/merge": {"post": {"security": [{"oauth2": ["pullrequest:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}]}, "/teams/{username}/followers": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of user objects.", "schema": {"$ref": "#/definitions/paginated_users"}}, "404": {"description": "If no team exists for the specified name, or if the specified account is a personal account, not a team account.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The team's username", "name": "username", "in": "path"}], "tags": ["teams"]}}, "/snippets/{username}/{encoded_id}/{node_id}/files/{path}": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "name": "node_id", "in": "path"}, {"required": true, "type": "string", "name": "path", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"headers": {"Content-Type": {"type": "string", "description": "The mime type as derived from the filename"}, "Content-Disposition": {"type": "string", "description": "attachment"}}, "description": "Returns the contents of the specified file."}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the file or snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["snippets"]}}, "/addon/linkers/{linker_key}": {"parameters": [{"required": true, "type": "string", "name": "linker_key", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}}, "/repositories/{username}/{repo_slug}/refs/tags": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["refs"]}}, "/repositories/{username}/{repo_slug}/commit/{node}/approve": {"post": {"security": [{"oauth2": ["repository:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The `participant` object recording that the authenticated user approved the commit.", "schema": {"$ref": "#/definitions/participant"}}, "404": {"description": "If the specified commit, or the repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The commit's SHA1.", "name": "node", "in": "path"}], "tags": ["commits"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "node", "in": "path"}], "delete": {"security": [{"oauth2": ["repository:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"204": {"description": "An empty response indicating the authenticated user's approval has been withdrawn."}, "404": {"description": "If the specified commit, or the repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The commit's SHA1.", "name": "node", "in": "path"}], "tags": ["commits"]}}, "/account/{username}/addons": {"post": {"security": [{"oauth2": ["account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["account:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/commits": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/snippets/{username}/{encoded_id}/{revision}/diff": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "name": "revision", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The raw diff contents."}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"type": "string", "description": "When used, only one the diff of the specified file will be returned.", "name": "path", "in": "query"}, {"required": true, "type": "string", "description": "The snippet id.", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "description": "A revspec expression. This can simply be a commit SHA1, a ref name, or a compare expression like `staging..production`.", "name": "revision", "in": "path"}], "tags": ["snippets"]}}, "/snippets/{username}/{encoded_id}/watchers": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}], "get": {"responses": {"200": {"description": "The paginated list of users watching this snippet", "schema": {"$ref": "#/definitions/paginated_users"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet id.", "name": "encoded_id", "in": "path"}], "tags": ["snippets"], "deprecated": true, "security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": ""}}, "/repositories/{username}/{repo_slug}/branch-restrictions/{id}": {"put": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["branch_restrictions"]}, "delete": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["branch_restrictions"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "id", "in": "path"}], "get": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["branch_restrictions"]}}, "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments": {"post": {"security": [{"oauth2": ["issue:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"400": {"description": "If no files were uploaded, or if the wrong `Content-Type` was used."}, "201": {"headers": {"Location": {"type": "string", "description": "The URL to the issue's collection of attachments."}}, "description": "An empty response document."}, "404": {"description": "If the specified repository or issue does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}, "401": {"description": "If the issue tracker is private and the request was not authenticated."}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "issue_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "A paginated list of all attachments for this issue.", "schema": {"$ref": "#/definitions/paginated_issue_attachments"}}, "401": {"description": "If the issue tracker is private and the request was not authenticated."}, "404": {"description": "If the specified repository or version does not exist, or if the repository doesn't have the issue tracker enabled.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "integer", "description": "The issue's id", "name": "issue_id", "in": "path"}], "tags": ["issue_tracker"]}}, "/repositories/{username}/{repo_slug}": {"post": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The newly created repository.", "schema": {"$ref": "#/definitions/repository"}}, "401": {"description": "If the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "400": {"description": "If the input document was invalid, or if the caller lacks the privilege to create repositories under the targeted account.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"schema": {"$ref": "#/definitions/repository"}, "required": false, "description": "The repository that is to be created. Note that most object elements are optional. Elements \"owner\" and \"full_name\" are ignored as the URL implies them.", "name": "_body", "in": "body"}], "tags": ["repositories"]}, "delete": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"204": {"description": "Indicates successful deletion."}, "403": {"description": "If the caller either does not have admin access to the repository, or the repository is set to read-only.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the repository does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["repositories"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The repository object.", "schema": {"$ref": "#/definitions/repository"}}, "403": {"description": "If the repository is private and the authenticated user does not have access to it.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If no repository exists at this location.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["repositories"]}}, "/repositories/{username}/{repo_slug}/default-reviewers/{target_username}": {"put": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}, "delete": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "target_username", "in": "path"}], "get": {"security": [{"oauth2": ["repository:admin"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "issue_id", "in": "path"}], "get": {"security": [{"oauth2": ["issue"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["issue_tracker"]}}, "/snippets/{username}/{encoded_id}/{node_id}": {"put": {"responses": {"200": {"description": "The updated snippet object.", "schema": {"$ref": "#/definitions/snippet"}}, "401": {"description": "If the snippet is private and the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "403": {"description": "If authenticated user does not have permission to update the private snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet or the revision does not exist.", "schema": {"$ref": "#/definitions/error"}}, "405": {"description": "If `{node_id}` is not the latest revision.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet's id.", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "description": "A commit revision (SHA1).", "name": "node_id", "in": "path"}], "tags": ["snippets"], "produces": ["application/json", "multipart/related", "multipart/form-data"], "security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "consumes": ["application/json", "multipart/related", "multipart/form-data"], "description": ""}, "delete": {"security": [{"oauth2": ["snippet:write"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"401": {"description": "If the snippet is private and the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "403": {"description": "If authenticated user does not have permission to delete the private snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}, "204": {"description": "If the snippet was deleted successfully."}, "405": {"description": "If `{node_id}` is not the latest revision.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet's id.", "name": "encoded_id", "in": "path"}], "tags": ["snippets"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "name": "node_id", "in": "path"}], "get": {"responses": {"200": {"description": "The snippet object.", "schema": {"$ref": "#/definitions/snippet"}}, "401": {"description": "If the snippet is private and the request was not authenticated.", "schema": {"$ref": "#/definitions/error"}}, "403": {"description": "If authenticated user does not have access to the private snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet, or the revision does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet's id.", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "description": "A commit revision (SHA1).", "name": "node_id", "in": "path"}], "produces": ["application/json", "multipart/related", "multipart/form-data"], "tags": ["snippets"], "security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": ""}}, "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/patch": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "repo_slug", "in": "path"}, {"required": true, "type": "string", "name": "pull_request_id", "in": "path"}], "get": {"security": [{"oauth2": ["pullrequest"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["pullrequests"]}}, "/addon/linkers/{linker_key}/values/": {"delete": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}, "parameters": [{"required": true, "type": "string", "name": "linker_key", "in": "path"}], "get": {"security": [{"oauth2": []}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"default": {"description": "Unexpected error.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["addon"]}}, "/users/{username}/hooks/{uid}": {"put": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The webhook subscription object.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "403": {"description": "If the authenticated user does not have permission to update the webhook.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the webhook or user does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id", "name": "uid", "in": "path"}], "tags": ["users", "webhooks"]}, "delete": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"204": {"description": "When the webhook was deleted successfully"}, "403": {"description": "If the authenticated user does not have permission to delete the webhook.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the webhook or user does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id", "name": "uid", "in": "path"}], "tags": ["users", "webhooks"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "uid", "in": "path"}], "get": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The webhook subscription object.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "404": {"description": "If the webhook or user does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The installed webhook's id.", "name": "uid", "in": "path"}], "tags": ["users", "webhooks"]}}, "/teams/{username}/hooks": {"post": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"201": {"headers": {"Location": {"type": "string", "description": "The URL of new newly created webhook."}}, "description": "The newly installed webhook.", "schema": {"$ref": "#/definitions/webhook_subscription"}}, "403": {"description": "If the authenticated user is not an admin on the specified team.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the specified team does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["teams", "webhooks"]}, "parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["webhook"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The paginated list of installed webhooks.", "schema": {"$ref": "#/definitions/paginated_webhook_subscriptions"}}, "403": {"description": "If the authenticated user is not an admin on the specified team.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the specified team does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["teams", "webhooks"]}}, "/repositories": {"parameters": [], "get": {"security": [{"oauth2": ["repository"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "All public repositories.", "schema": {"$ref": "#/definitions/paginated_repositories"}}}, "parameters": [], "tags": ["repositories"]}}, "/snippets/{username}/{encoded_id}/{revision}/patch": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}, {"required": true, "type": "string", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "name": "revision", "in": "path"}], "get": {"security": [{"oauth2": ["snippet"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "The raw patch contents."}, "403": {"description": "If the authenticated user does not have access to the snippet.", "schema": {"$ref": "#/definitions/error"}}, "404": {"description": "If the snippet does not exist.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [{"required": true, "type": "string", "description": "The snippet id.", "name": "encoded_id", "in": "path"}, {"required": true, "type": "string", "description": "A revspec expression. This can simply be a commit SHA1, a ref name, or a compare expression like `staging..production`.", "name": "revision", "in": "path"}], "tags": ["snippets"]}}, "/teams/{username}/members": {"parameters": [{"required": true, "type": "string", "name": "username", "in": "path"}], "get": {"security": [{"oauth2": ["account"]}, {"basic": []}, {"api_key": []}], "description": "", "responses": {"200": {"description": "All members", "schema": {"$ref": "#/definitions/user"}}, "404": {"description": "When the team does not exist, or multiple teams with the same name exist that differ only in casing and the URL did not match the exact casing of a particular one.", "schema": {"$ref": "#/definitions/error"}}}, "parameters": [], "tags": ["teams"]}}}, "schemes": ["https"], "tags": [{"name": "users", "description": ""}, {"name": "teams", "description": ""}, {"name": "repositories", "description": ""}, {"name": "refs", "description": ""}, {"name": "commits", "description": ""}, {"name": "pullrequests", "description": ""}, {"name": "issue_tracker", "description": "The issues resource provides functionality for getting information on\nissues in an issue tracker, creating new issues, updating them and deleting\nthem.\n\nYou can access public issues without authentication, but you can't gain access\nto private repositories' issues. By authenticating, you will get the ability\nto create issues, as well as access to updating data or deleting issues you\nhave access to."}, {"name": "wiki", "description": ""}, {"name": "downloads", "description": ""}, {"name": "snippets", "description": ""}, {"name": "webhooks", "description": "Webhooks provide a way to configure Bitbucket Cloud to make requests to\nyour server (or another external service) whenever certain events occur in\nBitbucket Cloud.\n\nA webhook consists of:\n\n* A subject -- The resource that generates the events. Currently, this resource\n  is the repository, user account, or team where you create the webhook.\n* One or more event -- The default event is a repository push, but you can\n  select multiple events that can trigger the webhook.\n* A URL -- The endpoint where you want Bitbucket to send the event payloads\n  when a matching event happens.\n\nThere are two parts to getting a webhook to work: creating the webhook and\ntriggering the webhook. After you create a webhook for an event, every time\nthat event occurs, Bitbucket sends a payload request that describes the event\nto the specified URL. Thus, you can think of webhooks as a kind of\nnotification system.\n\nUse webhooks to integrate applications with Bitbucket Cloud. The following\nuse cases provides examples of when you would want to use webhooks:\n\n* Every time a user pushes commits in a repository, you may want to notify\n  your CI server to start a build.\n* Every time a user pushes commits or creates a pull request, you may want to\n  display a notification in your application.\n"}], "basePath": "/2.0", "produces": ["application/json"], "securityDefinitions": {"oauth2": {"scopes": {"wiki": "Read and modify your repositories' wikis", "snippet": "Read your snippets", "account": "Read your account information", "repository:admin": "Administer your repositories", "repository": "Read your repositories", "snippet:write": "Read and modify your snippets", "issue:write": "Read and modify your repositories' issues", "pullrequest": "Read your repositories and their pull requests", "webhook": "Read and modify your repositories' webhooks", "pullrequest:write": "Read and modify your repositories and their pull requests", "project": "Read your team's project settings and read repositories contained within your team's projects", "project:write": "Read and modify your team's project settings, and read and transfer repositories within your team's projects", "team": "Read your team membership information", "repository:write": "Read and modify your repositories", "team:write": "Read and modify your team membership information", "account:write": "Read and modify your account information", "issue": "Read your repositories' issues", "email": "Read your account's primary email address"}, "tokenUrl": "https://bitbucket.org/site/oauth2/access_token", "description": "OAuth 2 as per [RFC-6749](https://tools.ietf.org/html/rfc6749).", "flow": "accessCode", "type": "oauth2", "authorizationUrl": "https://bitbucket.org/site/oauth2/authorize"}, "api_key": {"in": "header", "type": "apiKey", "description": "API Keys can be used as Basic HTTP Authentication credentials and provide a substitute for the account's actual username and password. API Keys are only available to team accounts and there is only 1 key per account. API Keys do not support scopes and have therefore access to all contents of the account.", "name": "Authorization"}, "basic": {"type": "basic", "description": "Basic HTTP Authentication as per [RFC-2617](https://tools.ietf.org/html/rfc2617) (Digest not supported). Note that Basic Auth with username and password as credentials is only available on accounts that have 2-factor-auth / 2-step-verification disabled. If you use 2fa, you should authenticate using OAuth2 instead."}}, "x-revision": "195aa3f25c29", "host": "api.bitbucket.org", "definitions": {"paginated_repositories": {"additionalProperties": false, "type": "object", "description": "A paginated list of repositories.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/repository"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "bitbucket.apps.api.serializers.Page": {"additionalProperties": false, "type": "object", "properties": {"previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}}}, "subject_types": {"additionalProperties": false, "type": "object", "description": "The mapping of resource/subject types pointing to their individual event types.", "properties": {"user": {"additionalProperties": false, "type": "object", "properties": {"events": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "repository": {"additionalProperties": false, "type": "object", "properties": {"events": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "team": {"additionalProperties": false, "type": "object", "properties": {"events": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}}}, "paginated_hook_events": {"additionalProperties": false, "type": "object", "description": "A paginated list of webhook types available to subscribe on.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/hook_event"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "base_commit": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "The common base type for both repository and snippet commits.", "properties": {"date": {"type": "string", "format": "date-time"}, "parents": {"minItems": 0, "items": {"$ref": "#/definitions/base_commit"}, "type": "array"}, "message": {"type": "string"}, "hash": {"pattern": "[0-9a-f]{7,}?", "type": "string"}, "author": {"$ref": "#/definitions/account"}}}]}, "participant": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "Object describing a user's role on resources like commits or pull requests.", "properties": {"role": {"enum": ["PARTICIPANT", "REVIEWER"], "type": "string"}, "user": {"$ref": "#/definitions/user"}, "approved": {"type": "boolean"}}}]}, "paginated_versions": {"additionalProperties": false, "type": "object", "description": "A paginated list of issue tracker versions.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/version"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "paginated_users": {"additionalProperties": false, "type": "object", "description": "A paginated list of users.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/user"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "snippet": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A snippet object.", "properties": {"scm": {"enum": ["hg", "git"], "type": "string", "description": "The DVCS used to store the snippet."}, "title": {"type": "string"}, "creator": {"$ref": "#/definitions/account"}, "created_on": {"type": "string", "format": "date-time"}, "owner": {"$ref": "#/definitions/account"}, "updated_on": {"type": "string", "format": "date-time"}, "id": {"minimum": 0, "type": "integer"}, "is_private": {"type": "boolean"}}}]}, "hook_event": {"additionalProperties": false, "type": "object", "description": "An event, associated with a resource or subject type.", "properties": {"category": {"type": "string", "description": "The category this event belongs to."}, "event": {"enum": ["pullrequest:updated", "repo:commit_status_created", "repo:fork", "issue:comment_created", "pullrequest:rejected", "pullrequest:fulfilled", "pullrequest:comment_created", "pullrequest:comment_deleted", "issue:created", "repo:commit_comment_created", "pullrequest:approved", "repo:commit_status_updated", "pullrequest:comment_updated", "issue:updated", "pullrequest:unapproved", "pullrequest:created", "repo:push"], "type": "string", "description": "The event identifier."}, "description": {"type": "string", "description": "More detailed description of the webhook event type."}, "label": {"type": "string", "description": "Summary of the webhook event type."}}}, "version": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A version as defined in a repository's issue tracker.", "properties": {"name": {"type": "string"}, "links": {"additionalProperties": false, "type": "object", "properties": {"self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "id": {"type": "integer"}}}]}, "team": {"allOf": [{"$ref": "#/definitions/account"}, {"additionalProperties": true, "type": "object", "description": "A team object.", "properties": {}}]}, "issue": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "An issue.", "properties": {"content": {"additionalProperties": false, "type": "object", "properties": {"raw": {"type": "string", "description": "The text as it was typed by a user."}, "markup": {"enum": ["markdown", "creole"], "type": "string", "description": "The type of markup language the content is to be interpreted in."}, "html": {"type": "string", "description": "The user's markup rendered as HTML."}}}, "kind": {"enum": ["bug", "enhancement", "proposal", "task"], "type": "string"}, "repository": {"$ref": "#/definitions/repository"}, "links": {"additionalProperties": false, "type": "object", "properties": {"attachments": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "watch": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "comments": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "html": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "vote": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "title": {"type": "string"}, "reporter": {"$ref": "#/definitions/user"}, "component": {"$ref": "#/definitions/component"}, "votes": {"type": "integer"}, "priority": {"enum": ["trivial", "minor", "major", "critical", "blocker"], "type": "string"}, "assignee": {"$ref": "#/definitions/user"}, "state": {"enum": ["new", "open", "resolved", "on hold", "invalid", "duplicate", "wontfix", "closed"], "type": "string"}, "version": {"$ref": "#/definitions/version"}, "edited_on": {"type": "string", "format": "date-time"}, "created_on": {"type": "string", "format": "date-time"}, "milestone": {"$ref": "#/definitions/milestone"}, "updated_on": {"type": "string", "format": "date-time"}, "id": {"type": "integer"}}}]}, "webhook_subscription": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A Webhook subscription.", "properties": {"subject_type": {"enum": ["user", "repository", "team"], "type": "string", "description": "The type of entity, which is `repository` in the case of webhook subscriptions on repositories."}, "uuid": {"type": "string", "description": "The webhook's id"}, "url": {"type": "string", "description": "The URL events get delivered to.", "format": "uri"}, "created_at": {"type": "string", "format": "date-time"}, "description": {"type": "string", "description": "A user-defined description of the webhook."}, "active": {"type": "boolean"}, "events": {"minItems": 1, "items": {"enum": ["pullrequest:updated", "repo:commit_status_created", "repo:fork", "issue:comment_created", "pullrequest:rejected", "pullrequest:fulfilled", "pullrequest:comment_created", "pullrequest:comment_deleted", "issue:created", "repo:commit_comment_created", "pullrequest:approved", "repo:commit_status_updated", "pullrequest:comment_updated", "issue:updated", "pullrequest:unapproved", "pullrequest:created", "repo:push"], "type": "string"}, "uniqueItems": true, "description": "The events this webhook is subscribed to.", "type": "array"}, "subject": {"$ref": "#/definitions/object"}}}]}, "repository": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A Bitbucket repository.", "properties": {"scm": {"enum": ["hg", "git"], "type": "string"}, "has_wiki": {"type": "boolean"}, "uuid": {"type": "string", "description": "The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user."}, "links": {"additionalProperties": false, "type": "object", "properties": {"watchers": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "commits": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "downloads": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "html": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "avatar": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "hooks": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "forks": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "clone": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "pullrequests": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "fork_policy": {"enum": ["allow_forks", "no_public_forks", "no_forks"], "type": "string", "description": "\nControls the rules for forking this repository.\n\n* **allow_forks**: unrestricted forking\n* **no_public_forks**: restrict forking to private forks (forks cannot\n  be made public later)\n* **no_forks**: deny all forking\n"}, "description": {"type": "string"}, "language": {"type": "string"}, "created_on": {"type": "string", "format": "date-time"}, "parent": {"$ref": "#/definitions/repository"}, "full_name": {"type": "string", "description": "The concatenation of the repository owner's username and the slugified name, e.g. \"evzijst/interruptingcow\". This is the same string used in Bitbucket URLs."}, "has_issues": {"type": "boolean"}, "owner": {"$ref": "#/definitions/account"}, "updated_on": {"type": "string", "format": "date-time"}, "size": {"type": "integer"}, "is_private": {"type": "boolean"}, "name": {"type": "string"}}}]}, "snippet_commit": {"allOf": [{"$ref": "#/definitions/base_commit"}, {"additionalProperties": true, "type": "object", "description": "", "properties": {"snippet": {"$ref": "#/definitions/snippet"}, "links": {"additionalProperties": false, "type": "object", "properties": {"diff": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "html": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}}}]}, "object": {"description": "Base type for most resource objects. It defines the common `type` element that identifies an object's type. It also identifies the element as Swagger's `discriminator`.", "required": ["type"], "additionalProperties": true, "discriminator": "type", "type": "object", "properties": {"type": {"type": "string"}}}, "component": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A component as defined in a repository's issue tracker.", "properties": {"name": {"type": "string"}, "links": {"additionalProperties": false, "type": "object", "properties": {"self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "id": {"type": "integer"}}}]}, "paginated_components": {"additionalProperties": false, "type": "object", "description": "A paginated list of issue tracker components.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/component"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "user": {"allOf": [{"$ref": "#/definitions/account"}, {"additionalProperties": true, "type": "object", "description": "A user object.", "properties": {}}]}, "milestone": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A milestone as defined in a repository's issue tracker.", "properties": {"name": {"type": "string"}, "links": {"additionalProperties": false, "type": "object", "properties": {"self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "id": {"type": "integer"}}}]}, "paginated_issue_attachments": {"additionalProperties": false, "type": "object", "description": "A paginated list of issue attachments.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/issue_attachment"}, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "paginated_webhook_subscriptions": {"additionalProperties": false, "type": "object", "description": "A paginated list of webhook subscriptions", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/webhook_subscription"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "snippet_comment": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A comment on a snippet.", "properties": {"snippet": {"$ref": "#/definitions/snippet"}, "links": {"additionalProperties": false, "type": "object", "properties": {"self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "html": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}}}]}, "paginated_milestones": {"additionalProperties": false, "type": "object", "description": "A paginated list of issue tracker milestones.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/milestone"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "paginated_issues": {"additionalProperties": false, "type": "object", "description": "A paginated list of issues.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/issue"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "account": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "An account object.", "properties": {"username": {"pattern": "^[a-zA-Z0-9_\\-]+$", "type": "string"}, "website": {"type": "string"}, "display_name": {"type": "string"}, "uuid": {"type": "string"}, "links": {"additionalProperties": false, "type": "object", "properties": {"self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "repositories": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "html": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "followers": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "avatar": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "following": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "created_on": {"type": "string", "format": "date-time"}}}]}, "issue_attachment": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "An issue file attachment's meta data. Note this does not contain the file's actual contents.", "properties": {"name": {"type": "string"}, "links": {"additionalProperties": false, "type": "object", "properties": {"self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}}}]}, "paginated_snippet_commit": {"additionalProperties": false, "type": "object", "description": "A paginated list of snippet commits.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/snippet_commit"}, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "pullrequest": {"allOf": [{"$ref": "#/definitions/object"}, {"additionalProperties": true, "type": "object", "description": "A pull request object.", "properties": {"state": {"enum": ["MERGED", "SUPERSEDED", "OPEN", "DECLINED"], "type": "string"}, "author": {"$ref": "#/definitions/account"}, "id": {"type": "integer"}, "links": {"additionalProperties": false, "type": "object", "properties": {"decline": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "commits": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "comments": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "merge": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "html": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "activity": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "diff": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "approve": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}, "title": {"type": "string"}}}]}, "paginated_teams": {"additionalProperties": false, "type": "object", "description": "A paginated list of teams.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/team"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "paginated_snippet_comments": {"additionalProperties": false, "type": "object", "description": "A paginated list of snippet comments.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/snippet_comment"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}, "error": {"additionalProperties": false, "type": "object", "properties": {"error": {"additionalProperties": false, "required": ["message"], "type": "object", "properties": {"message": {"type": "string"}, "detail": {"type": "string"}}}}}, "commit": {"allOf": [{"$ref": "#/definitions/base_commit"}, {"additionalProperties": true, "type": "object", "description": "A repository commit object.", "properties": {"participants": {"minItems": 0, "items": {"$ref": "#/definitions/participant"}, "type": "array"}, "repository": {"$ref": "#/definitions/repository"}, "links": {"additionalProperties": false, "type": "object", "properties": {"self": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "comments": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "patch": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "html": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "diff": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}, "approve": {"additionalProperties": false, "type": "object", "properties": {"href": {"type": "string", "format": "uri"}}}}}}}]}, "paginated_snippets": {"additionalProperties": false, "type": "object", "description": "A paginated list of snippets.", "properties": {"next": {"type": "string", "description": "Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}, "values": {"minItems": 0, "items": {"$ref": "#/definitions/snippet"}, "uniqueItems": true, "type": "array"}, "pagelen": {"minimum": 1, "type": "integer", "description": "Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values."}, "size": {"minimum": 0, "type": "integer", "description": "Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute."}, "page": {"minimum": 1, "type": "integer", "description": "Page number of the current results. This is an optional element that is not provided in all responses."}, "previous": {"type": "string", "description": "Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.", "format": "uri"}}}}, "swagger": "2.0", "consumes": ["application/json"]}
